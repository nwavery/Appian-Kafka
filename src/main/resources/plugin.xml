<appian-plugin name="Appian Kafka Connector" key="com.example.appian.kafka">

    <plugin-info>
        <description>A plugin to connect Appian with Apache Kafka for producing and consuming messages.</description>
        <vendor name="Example Corp" url="http://www.example.com" />
        <version>1.0.0</version>
        <application-version min="23.4" /> <!-- Specify compatible Appian version -->
    </plugin-info>

    <!-- Kafka Configuration Properties -->
    <configuration>
        <property name="kafka.bootstrap.servers" required="true">
            <name>Kafka Bootstrap Servers</name>
            <description>Comma-separated list of host:port pairs for establishing the initial connection to the Kafka cluster.</description>
            <type>STRING</type>
        </property>
        <property name="kafka.security.protocol" required="false">
            <name>Kafka Security Protocol</name>
            <description>Protocol used to communicate with brokers (e.g., PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL). For Confluent Cloud, use SASL_SSL.</description>
            <type>STRING</type>
            <default-value>PLAINTEXT</default-value>
        </property>
        <property name="kafka.sasl.mechanism" required="false">
            <name>Kafka SASL Mechanism</name>
            <description>SASL mechanism to use for authentication (e.g., PLAIN, GSSAPI). For Confluent Cloud, use PLAIN with API keys.</description>
            <type>STRING</type>
            <default-value>PLAIN</default-value> <!-- Default to PLAIN if SASL is used -->
        </property>
        <property name="kafka.sasl.jaas.config" required="false">
            <name>Kafka SASL JAAS Configuration</name>
            <description>JAAS login context parameters for SASL connections. For Confluent Cloud: org.apache.kafka.common.security.plain.PlainLoginModule required username="API_KEY" password="API_SECRET";</description>
            <type>STRING</type>
            <masked>true</masked> <!-- Mask this field in the Admin Console as it contains secrets -->
        </property>
        <property name="kafka.schema.registry.url" required="false">
            <name>Kafka Schema Registry URL</name>
            <description>URL for the Confluent Schema Registry (e.g., http://localhost:8081). Required if using Avro serializers/deserializers.</description>
            <type>STRING</type>
        </property>
        <!-- Add other global Kafka configurations here if needed (e.g., SASL mechanism, JAAS config template) -->
    </configuration>

    <!-- Kafka Producer Smart Service -->
    <smart-service name="KafkaProducerSmartService" key="KafkaProducerSmartService" class="com.example.appian.kafka.KafkaProducerSmartService">
        <display-name>Produce Kafka Message</display-name>
        <category>Integration Services.Kafka Messaging</category>
        <description>Sends a message to a Kafka topic.</description>

        <parameter name="topic" required="true">
            <type>Text</type>
            <reference>topic</reference>
        </parameter>
        <parameter name="key" required="false"> <!-- Assuming key is optional -->
            <type>Text</type>
            <reference>key</reference>
        </parameter>
        <parameter name="value" required="true">
            <type>Text</type>
            <reference>value</reference>
        </parameter>
        <parameter name="valueSchema" required="true"> <!-- New input for Avro schema -->
            <name>Value Schema</name>
            <description>The Avro schema string for the message value (JSON format).</description>
            <type>Text</type> <!-- Should be a long text / paragraph in Appian -->
            <reference>valueSchemaString</reference>
        </parameter>
        <return-parameter name="success">
            <type>Boolean</type>
            <reference>success</reference>
        </return-parameter>
    </smart-service>

    <!-- Kafka Consumer Smart Service -->
    <smart-service name="KafkaConsumerSmartService" key="KafkaConsumerSmartService" class="com.example.appian.kafka.KafkaConsumerSmartService">
        <display-name>Consume Kafka Messages</display-name>
        <category>Integration Services.Kafka Messaging</category>
        <description>Consumes messages from a Kafka topic using a polling mechanism.</description>

        <parameter name="topic" required="true">
            <type>Text</type>
            <reference>topic</reference>
        </parameter>
        <parameter name="groupId" required="true">
            <type>Text</type>
            <reference>groupId</reference>
        </parameter>
        <parameter name="pollTimeout" required="true">
            <type>Number (Integer)</type>
            <reference>pollTimeoutMs</reference> <!-- Corresponds to pollTimeoutMs in the Java class -->
        </parameter>
        <return-parameter name="messages">
            <type>List of Text</type>
            <reference>messages</reference>
        </return-parameter>
    </smart-service>

</appian-plugin> 